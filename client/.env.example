# Environment Configuration for Tweet Service

# AWS S3 Configuration for Tweet Storage
# This implementation uses public S3 bucket access (no AWS SDK required)
VITE_AWS_REGION=us-east-1
VITE_S3_BUCKET_NAME=your-tweet-bucket-name

# Optional: S3 object key/path where tweets are stored (default: tweets.json)
VITE_S3_TWEETS_KEY=tweets.json

# Optional: Cache expiry time in milliseconds (default: 5 minutes)
VITE_TWEETS_CACHE_EXPIRY=300000

# Instructions:
# 1. Copy this file to .env in your client directory
# 2. Replace VITE_S3_BUCKET_NAME with your actual S3 bucket name
# 3. Make sure your S3 bucket is configured for public read access
# 4. Upload a tweets.json file to your S3 bucket with the expected format
# 5. Restart your development server after updating .env

# S3 Bucket Setup:
# 1. Create an S3 bucket in AWS
# 2. Enable public read access for the tweets.json file
# 3. Upload your tweets.json file to the bucket root
# 4. The service will access: https://your-bucket.s3.region.amazonaws.com/tweets.json

# Expected S3 JSON Structure (tweets.json):
# [
#   {
#     "id": "unique_tweet_id",
#     "username": "Username",
#     "handle": "@handle", 
#     "content": "Tweet content...",
#     "timestamp": "2024-03-15T10:30:00Z",
#     "avatar": "https://example.com/avatar.jpg",
#     "verified": true,
#     "retweets": 123,
#     "likes": 456,
#     "hashtags": ["#hashtag1", "#hashtag2"]
#   }
# ]

# Note: 
# - No AWS credentials needed (uses public bucket access)
# - Make sure your bucket allows public read access to tweets.json
# - The service will fall back to mock data if S3 is unavailable